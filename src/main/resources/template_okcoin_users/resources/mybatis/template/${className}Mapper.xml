<#include "/macro.include"/>
<#assign className = table.className>
<#assign classNameLower = className?uncap_first>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="${basepackage}.data.${className}Repository">
    <!-- CodeBuilder  Generated-->
    <resultMap id="${className}Map" type="${basepackage}.domain.${className}">
<#list table.columns as column>
    <#if column.pk>
        <id column="${column.sqlName}" property="${column.columnNameLower}" jdbcType="${column.jdbcType}"/>
    <#else>
        <result column="${column.sqlName}" property="${column.columnNameLower}" jdbcType="${column.jdbcType}"/>
    </#if>
</#list>
    </resultMap>
<#noparse>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
</#noparse>
    <sql id="Table_Name">${table.sqlName}</sql>
    <sql id="Base_Column_List_Without_Id">
        <#list table.columns as column><#if column.pk><#else>`${column.sqlName}`<#if column_has_next>, </#if></#if></#list>
    </sql>
    <sql id="Base_Column_List">
        ${table.idColumn.columnNameLower}, <include refid="Base_Column_List_Without_Id"/>
    </sql>
    <sql id="Insert_Columns">
<#list table.columns as column>
    <#if column.pk>
    <#else>
        <if test="record.${column.columnNameLower} != null">`${column.sqlName}`,</if>
    </#if>
</#list>
    </sql>
    <sql id="Insert_Values">
<#list table.columns as column>
    <#if column.pk>
    <#else>
        <if test="record.${column.columnNameLower} != null">${r"#{"}record.${column.columnNameLower}, jdbcType=${column.jdbcType}${"}"},</if>
    </#if>
</#list>
    </sql>
    <sql id="Batch_Insert_Values">
<#list table.columns as column>
    <#if column.pk>
    <#else>
        ${r"#{"}record.${column.columnNameLower}, jdbcType=${column.jdbcType}${"}"},
    </#if>
</#list>
    </sql>
    <sql id="Batch_Insert_Values_On_DuplicateKey">
        ${r"#{"}record.${table.idColumn.columnNameLower}, jdbcType=${table.idColumn.jdbcType}${"}"},
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
<#list table.columns as column>
    <#if column.pk>
    <#else>
        <if test="record.${column.columnNameLower} != null">`${column.sqlName}` = ${r"#{"}record.${column.columnNameLower}, jdbcType=${column.jdbcType}${"}"},</if>
    </#if>
</#list>
    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        <selectKey resultType="${table.idColumn.javaType}" keyProperty="record.${table.idColumn.columnNameLower}" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_On_DuplicateKey"/>
            </trim>
        </foreach>
        ON DUPLICATE KEY UPDATE
<#list table.columns as column>
    <#if column.pk>
    <#else>
        `${column.sqlName}` = VALUES(`${column.sqlName}`)<#if column_has_next>, </#if>
    </#if>
</#list>
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where ${table.idColumn.sqlName} = ${r"#{"}${table.idColumn.columnNameLower}, jdbcType=${table.idColumn.jdbcType}${r"}"}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where ${table.idColumn.sqlName} in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            ${r"#{"}record.${table.idColumn.columnNameLower}, jdbcType=${table.idColumn.jdbcType}${r"}"}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where ${table.idColumn.sqlName} = ${r"#{"}record.${table.idColumn.columnNameLower}, jdbcType=${table.idColumn.jdbcType}${r"}"}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update
            <include refid="Table_Name"/>
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where ${table.idColumn.sqlName} = ${r"#{"}record.${table.idColumn.columnNameLower}, jdbcType=${table.idColumn.jdbcType}${r"}"}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="${className}Map" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where ${table.idColumn.sqlName} = ${r"#{"}${table.idColumn.columnNameLower}, jdbcType=${table.idColumn.jdbcType}${r"}"}
    </select>
    <select id="selectByExample" resultMap="${className}Map" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${r"${"}example.orderByClause${r"}"}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="${className}Map" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${r"${"}example.orderByClause${r"}"}
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="${className}Map" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            ${r"#{"}record.${table.idColumn.columnNameLower}, jdbcType=${table.idColumn.jdbcType}${r"}"}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="${className}Map" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${r"${"}pager.sortItem${r"}"} ${r"${"}pager.sortType${r"}"}
        </if>
        limit ${r"#{"}pager.startIndex${r"}"} , ${r"#{"}pager.pageSize${r"}"}
    </select>
    <!-- end select -->
    <!-- My Custom Interfaces -->
</mapper>


